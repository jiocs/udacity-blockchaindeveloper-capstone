// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');
var fs = require('fs');

contract('Verifier', accounts => {
    beforeEach(async function () {
        this.verifierInstance = await Verifier.new();
    });

    // Test verification with correct proof
    it('Test verification with correct proof', async function() {
        // - use the contents from proof.json generated from zokrates steps
        let _proof = await JSON.parse(fs.readFileSync(".\\test\\proof.json"));

        // Prepare the proof argument to match the Struct defined in verifier.sol:
        let proof = {
            a: _proof.proof.a,
            b: _proof.proof.b,
            c: _proof.proof.c
        };

        // function verifyTx(Proof memory proof, uint[1] memory input)
        // public view returns (bool r)
        let result = await this.verifierInstance.verifyTx(proof, _proof.inputs);
        assert.equal(result, true, 'FAILED Test verification with correct proof');
    });

    // Test verification with incorrect proof
    it('Test verification with incorrect proof', async function() {
        // - use the contents from proof.json generated from zokrates steps
        let _proof = await JSON.parse(fs.readFileSync(".\\test\\proof.json"));
        let wrongInput = ["0x0000000000000000000000000000000000000000000000000000000000000000"];

        // Prepare the proof argument to match the Struct defined in verifier.sol:
        let proof = {
            a: _proof.proof.a,
            b: _proof.proof.b,
            c: _proof.proof.c
        };

        // function verifyTx(Proof memory proof, uint[1] memory input)
        // public view returns (bool r)
        let result = await this.verifierInstance.verifyTx(proof, wrongInput);
        assert.equal(result, false, 'FAILED Test verification with incorrect proof');
    });
});